<style>
  #cameraViewContainer {
    position: fixed;
    top: 124px;
    left: 0px;
    width: 100%;
    height: 720px;
    display: none;
    z-index: 1000;
  }

  @media only screen and (max-width: 768px) {
    #cameraViewContainer {
      top: 103px;
    }
  }
</style>

<div id="cameraViewContainer"></div>

<script>

  const cameraViewContainer = document.querySelector("#cameraViewContainer")
  let router = null;
  let cameraEnhancer;
  let isInitialized = false;

  async function initialize() {
    if (!isInitialized) {
      // initialize license
      Dynamsoft.License.LicenseManager.initLicense("DLS2eyJvcmdhbml6YXRpb25JRCI6IjIwMDAwMSJ9");

      // preload the libraries
      Dynamsoft.Core.CoreModule.loadWasm(["DBR"]);

      // Create a `CaptureVisionRouter` instance
      router = await Dynamsoft.CVR.CaptureVisionRouter.createInstance();

      // Create a `CameraEnhancer` instance for camera control and a `CameraView` instance for UI control.
      let view = await Dynamsoft.DCE.CameraView.createInstance("{{ 'dce.ui.liquid' | asset_url }}");
      cameraEnhancer = await Dynamsoft.DCE.CameraEnhancer.createInstance(view);
      cameraViewContainer.append(view.getUIElement());

      // Set `CameraEnhancer` instance as its image source.
      router.setInput(cameraEnhancer);

      // Define a callback for results.
      router.addResultReceiver({ onDecodedBarcodesReceived: (result) => {
        if (result.barcodeResultItems.length > 0) {
          window.location = window.location.origin + '/search?q=' + result.barcodeResultItems[0].text;
        }
      }});

      // Filter out unchecked and duplicate results.
      let filter = new Dynamsoft.Utility.MultiFrameResultCrossFilter();
      filter.enableResultCrossVerification(
        Dynamsoft.Core.EnumCapturedResultItemType.CRIT_BARCODE, true
      );
      filter.enableResultDeduplication(
        Dynamsoft.Core.EnumCapturedResultItemType.CRIT_BARCODE, true
      );
      await router.addResultFilter(filter);
      isInitialized = true;
    }
  }

  // Display camera view, open camera and start scanning single barcode.
  async function startDetection() {
    await initialize();
    if (cameraViewContainer.style.display == "inline") {
      cameraViewContainer.style.display = "none";
      await cameraEnhancer.close();
    } else {
      cameraViewContainer.style.display = "inline";
      await cameraEnhancer.open();
      await router.startCapturing("ReadSingleBarcode");
    }
  }

</script>
